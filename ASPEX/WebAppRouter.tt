<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
using System;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;

namespace ASPEX {
	public partial class WebApp {
<# for (int i = 1; i <= 16; i++) { #>
		public void MapDelete<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			RouteSetupActions.Add(builder => builder.MapDelete(template, httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				return handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: GetRequiredArgument<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!)<# if (j < i) { #>,<# } #>

<# } #>
				);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapGet<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			RouteSetupActions.Add(builder => builder.MapGet(template, httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				return handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: GetRequiredArgument<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!)<# if (j < i) { #>,<# } #>

<# } #>
				);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapPost<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			RouteSetupActions.Add(builder => builder.MapPost(template, async httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				await handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: await GetBodyOrFormOrRequiredArgumentAsync<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!).ConfigureAwait(false)<# if (j < i) { #>,<# } #>

<# } #>
				).ConfigureAwait(false);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapPut<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			RouteSetupActions.Add(builder => builder.MapPut(template, async httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				await handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: await GetBodyOrFormOrRequiredArgumentAsync<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!).ConfigureAwait(false)<# if (j < i) { #>,<# } #>

<# } #>
				).ConfigureAwait(false);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapVerb<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string verb, string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			RouteSetupActions.Add(builder => builder.MapVerb(verb, template, async httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				await handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: await GetBodyOrFormOrRequiredArgumentAsync<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!).ConfigureAwait(false)<# if (j < i) { #>,<# } #>

<# } #>
				).ConfigureAwait(false);
			}));
		}

<# } #>
		public void Map(Action<WebAppRouter> setupAction) {
			setupAction.Invoke(new WebAppRouter(this, ""));
		}

		private T? GetRequiredArgument<T>(HttpContext httpContext, string parameterName) where T : class {
			if (typeof(T) == typeof(HttpContext)) {
				return httpContext as T;
			} else if (typeof(T) == typeof(HttpRequest)) {
				return httpContext.Request as T;
			} else if (typeof(T) == typeof(HttpResponse)) {
				return httpContext.Response as T;
			} else if (typeof(T) == typeof(RouteData)) {
				return httpContext.GetRouteData() as T;
			} else if (typeof(T) == typeof(string)) {
				if (httpContext.GetRouteData().Values.TryGetValue(parameterName, out object value)) {
					return value.ToString() as T;
				} else {
					return null;
				}
			} else if (typeof(T) == typeof(Int)) {
				if (httpContext.GetRouteData().Values.TryGetValue(parameterName, out object value)) {
					if (value is string s && int.TryParse(s, out int v)) {
						return new Int(v) as T;
					} else if (value is int i) {
						return new Int(i) as T;
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return httpContext.RequestServices.GetRequiredService<T>();
			}
		}

		private async Task<T?> GetBodyOrFormOrRequiredArgumentAsync<T>(HttpContext httpContext, string parameterName) where T : class {
			if (parameterName == "body") {
				using StreamReader streamReader = new StreamReader(httpContext.Request.Body);
				string json = await streamReader.ReadToEndAsync().ConfigureAwait(false);
				return JsonConvert.DeserializeObject<T>(json);
			} else if (typeof(T) == typeof(IFormCollection)) {
				return await httpContext.Request.ReadFormAsync(httpContext.RequestAborted).ConfigureAwait(false) as T;
			} else {
				return GetRequiredArgument<T>(httpContext, parameterName);
			}
		}
	}

	public class WebAppRouter {
		private readonly WebApp _webApp;
		private readonly string _basePath;

		public WebAppRouter(WebApp webApp, string basePath) {
			_webApp = webApp;
			_basePath = basePath;
		}

<# for (int i = 1; i <= 16; i++) { #>
		public void MapDelete<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			_webApp.RouteSetupActions.Add(builder => builder.MapDelete(Path.Combine(_basePath, template).Replace('\\', '/'), httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				return handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: GetRequiredArgument<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!)<# if (j < i) { #>,<# } #>

<# } #>
				);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapGet<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			_webApp.RouteSetupActions.Add(builder => builder.MapGet(Path.Combine(_basePath, template).Replace('\\', '/'), httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				return handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: GetRequiredArgument<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!)<# if (j < i) { #>,<# } #>

<# } #>
				);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapPost<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			_webApp.RouteSetupActions.Add(builder => builder.MapPost(Path.Combine(_basePath, template).Replace('\\', '/'), async httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				await handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: await GetBodyOrFormOrRequiredArgumentAsync<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!).ConfigureAwait(false)<# if (j < i) { #>,<# } #>

<# } #>
				).ConfigureAwait(false);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapPut<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			_webApp.RouteSetupActions.Add(builder => builder.MapPut(Path.Combine(_basePath, template).Replace('\\', '/'), async httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				await handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: await GetBodyOrFormOrRequiredArgumentAsync<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!).ConfigureAwait(false)<# if (j < i) { #>,<# } #>

<# } #>
				).ConfigureAwait(false);
			}));
		}

<# } #>
<# for (int i = 1; i <= 16; i++) { #>
		public void MapVerb<T1<# for (int j = 2; j <= i; j++) { #>, T<#= j #><# } #>>(string verb, string template, Func<T1?<# for (int j = 2; j <= i; j++) { #>, T<#= j #>?<# } #>, Task> handler) where T1 : class<# for (int j = 2; j <= i; j++) { #> where T<#= j #> : class<# } #> {
			_webApp.RouteSetupActions.Add(builder => builder.MapVerb(verb, Path.Combine(_basePath, template).Replace('\\', '/'), async httpContext => {
				ParameterInfo[] parameters = handler.Method.GetParameters();
				await handler.Invoke(
<# for (int j = 1; j <= i; j++) { #>
					arg<#= i > 1 ? j.ToString() : "" #>: await GetBodyOrFormOrRequiredArgumentAsync<T<#= j #>>(httpContext, parameters[<#= j - 1 #>].Name!).ConfigureAwait(false)<# if (j < i) { #>,<# } #>

<# } #>
				).ConfigureAwait(false);
			}));
		}

<# } #>
		public void Map(Action<WebAppRouter> setupAction) {
			setupAction.Invoke(this);
		}

		private T? GetRequiredArgument<T>(HttpContext httpContext, string parameterName) where T : class {
			if (typeof(T) == typeof(HttpContext)) {
				return httpContext as T;
			} else if (typeof(T) == typeof(HttpRequest)) {
				return httpContext.Request as T;
			} else if (typeof(T) == typeof(HttpResponse)) {
				return httpContext.Response as T;
			} else if (typeof(T) == typeof(RouteData)) {
				return httpContext.GetRouteData() as T;
			} else if (typeof(T) == typeof(string)) {
				if (httpContext.GetRouteData().Values.TryGetValue(parameterName, out object value)) {
					return value.ToString() as T;
				} else {
					return null;
				}
			} else if (typeof(T) == typeof(Int)) {
				if (httpContext.GetRouteData().Values.TryGetValue(parameterName, out object value)) {
					if (value is string s && int.TryParse(s, out int v)) {
						return new Int(v) as T;
					} else if (value is int i) {
						return new Int(i) as T;
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return httpContext.RequestServices.GetRequiredService<T>();
			}
		}

		private async Task<T?> GetBodyOrFormOrRequiredArgumentAsync<T>(HttpContext httpContext, string parameterName) where T : class {
			if (parameterName == "body") {
				using StreamReader streamReader = new StreamReader(httpContext.Request.Body);
				string json = await streamReader.ReadToEndAsync().ConfigureAwait(false);
				return JsonConvert.DeserializeObject<T>(json);
			} else if (typeof(T) == typeof(IFormCollection)) {
				return await httpContext.Request.ReadFormAsync(httpContext.RequestAborted).ConfigureAwait(false) as T;
			} else {
				return GetRequiredArgument<T>(httpContext, parameterName);
			}
		}
	}
}